/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication1;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import java.util.Date;
import java.text.ParseException;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author jespe
 */
public class AdminFrame extends javax.swing.JFrame {

    /**
     * Creates new form AdminFrame
     */
    private InfDB idb;
    private String inLoggadAdminNamn;

    public AdminFrame(InfDB idb, String inLoggadAdminNamn) {
        initComponents();
        this.idb = idb;
        this.inLoggadAdminNamn = inLoggadAdminNamn;
        inloggadAgentNamnLBL.setText("Välkommen " + inLoggadAdminNamn);

        endDateLabel.setVisible(false);
        endDateTF.setVisible(false);
        startDateLabel.setVisible(false);
        startDateTF.setVisible(false);

        uppdateraListorOchCB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        homePanel = new javax.swing.JPanel();
        inloggadAgentNamnLBL = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        gammaltLosenordTF = new javax.swing.JTextField();
        nyttLosenordTF = new javax.swing.JTextField();
        nyttLosenordTestTF = new javax.swing.JTextField();
        bytLosenordBTN = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        nuvarandeKontorsChefTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        nyKontorsChefCB = new javax.swing.JComboBox<>();
        andraKontorsChefBTN = new javax.swing.JButton();
        angentPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        agentList = new javax.swing.JList<>();
        agentIDTF = new javax.swing.JTextField();
        agentNamnTF = new javax.swing.JTextField();
        agentLosenordTF = new javax.swing.JTextField();
        agentAnstallningsdatumTF = new javax.swing.JTextField();
        agentTelefonTF = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        andraAgentBTN = new javax.swing.JButton();
        taBortAgentBTN = new javax.swing.JButton();
        agentOmradeCB = new javax.swing.JComboBox<>();
        agentAdminCB = new javax.swing.JComboBox<>();
        alienPanel = new javax.swing.JPanel();
        typCB = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        alienListLST = new javax.swing.JList<>();
        valCB = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        startDateTF = new javax.swing.JTextField();
        startDateLabel = new javax.swing.JLabel();
        endDateLabel = new javax.swing.JLabel();
        endDateTF = new javax.swing.JTextField();
        alienIDTF = new javax.swing.JTextField();
        alienNamnTF = new javax.swing.JTextField();
        alienLosenordTF = new javax.swing.JTextField();
        alienRegistreringsdatumTF = new javax.swing.JTextField();
        alienTelefonTF = new javax.swing.JTextField();
        alienPlatsTF = new javax.swing.JTextField();
        alienAnsvarigAgentTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        andraAlienBTN = new javax.swing.JButton();
        alienRasCB = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        taBortAlienBTN = new javax.swing.JButton();
        omradenJPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        omradeList = new javax.swing.JList<>();
        jLabel32 = new javax.swing.JLabel();
        valtOmradeTF = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        nuvarandeOmradesChefTF = new javax.swing.JTextField();
        valdNyOmradeschefCB = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        andraOmradesChefBTN = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        verktygsNamnTF = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        laggTillVerktygBTN = new javax.swing.JButton();
        utrustningsTypCB = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        valdUtrustningCB = new javax.swing.JComboBox<>();
        taBortUtrustningBTN = new javax.swing.JToggleButton();
        valdUtrustningTF = new javax.swing.JTextField();
        registrereNyAgentPanel = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        nyAgentAdminSatusCB = new javax.swing.JComboBox<>();
        nyAgentOmradeCB = new javax.swing.JComboBox<>();
        nyAgentTelefonTF = new javax.swing.JTextField();
        nyAgentLosenordTF = new javax.swing.JTextField();
        nyAgentNamnTF = new javax.swing.JTextField();
        laggTillNyAgentBTN = new javax.swing.JButton();
        registrereaAlienJPanel = new javax.swing.JPanel();
        nyAlienNamnTF = new javax.swing.JTextField();
        nyAlienLosenordTF = new javax.swing.JTextField();
        nyAlienTelefonTF = new javax.swing.JTextField();
        nyAlienPlatsCB = new javax.swing.JComboBox<>();
        nyAlienAACB = new javax.swing.JComboBox<>();
        laggTillAlienBTN = new javax.swing.JButton();
        nyAlienRasCB = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        inloggadAgentNamnLBL.setText("Namn");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Byt lösenord:");

        gammaltLosenordTF.setText("Gammarl lösenord");

        nyttLosenordTF.setText("Nytt lösenord");

        nyttLosenordTestTF.setText("Skriv igen");

        bytLosenordBTN.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        bytLosenordBTN.setText("Byt lösenord");
        bytLosenordBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bytLosenordBTNActionPerformed(evt);
            }
        });

        jLabel19.setText("Nuvarande kontors chef");

        nuvarandeKontorsChefTF.setEditable(false);

        jLabel1.setText("Välj ny kontors chef");

        andraKontorsChefBTN.setText("Ändra");
        andraKontorsChefBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andraKontorsChefBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nyttLosenordTestTF, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bytLosenordBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 834, Short.MAX_VALUE))
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nyttLosenordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(homePanelLayout.createSequentialGroup()
                                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(gammaltLosenordTF)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inloggadAgentNamnLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                                .addGap(307, 307, 307)
                                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nuvarandeKontorsChefTF, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                    .addComponent(nyKontorsChefCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(andraKontorsChefBTN, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addComponent(inloggadAgentNamnLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(gammaltLosenordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(nyttLosenordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nyttLosenordTestTF, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(bytLosenordBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nuvarandeKontorsChefTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nyKontorsChefCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(andraKontorsChefBTN)))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Home", homePanel);

        angentPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                angentPanelComponentShown(evt);
            }
        });

        agentList.setToolTipText("");
        agentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                agentListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(agentList);

        agentIDTF.setEditable(false);

        agentNamnTF.setEditable(false);

        agentLosenordTF.setEditable(false);

        agentAnstallningsdatumTF.setEditable(false);

        agentTelefonTF.setEditable(false);

        jLabel11.setText("Agent_ID");

        jLabel12.setText("Anställningsdatum");

        jLabel13.setText("Lösenord:");

        jLabel14.setText("Namn:");

        jLabel15.setText("Telefon:");

        jLabel16.setText("Område");

        jLabel17.setText("Administratör");

        andraAgentBTN.setText("Ändra information");
        andraAgentBTN.setEnabled(false);
        andraAgentBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andraAgentBTNActionPerformed(evt);
            }
        });

        taBortAgentBTN.setText("Ta bort agent");
        taBortAgentBTN.setEnabled(false);
        taBortAgentBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taBortAgentBTNActionPerformed(evt);
            }
        });

        agentOmradeCB.setEnabled(false);

        agentAdminCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JA", "NEJ" }));
        agentAdminCB.setEnabled(false);

        javax.swing.GroupLayout angentPanelLayout = new javax.swing.GroupLayout(angentPanel);
        angentPanel.setLayout(angentPanelLayout);
        angentPanelLayout.setHorizontalGroup(
            angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(angentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(306, 306, 306)
                .addGroup(angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                    .addComponent(jLabel17)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(agentLosenordTF)
                    .addComponent(taBortAgentBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(agentNamnTF, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agentIDTF, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agentTelefonTF, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(andraAgentBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(agentOmradeCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(agentAdminCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(agentAnstallningsdatumTF))
                .addContainerGap(306, Short.MAX_VALUE))
        );
        angentPanelLayout.setVerticalGroup(
            angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(angentPanelLayout.createSequentialGroup()
                .addGroup(angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(angentPanelLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addGroup(angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(angentPanelLayout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel14)
                                .addGap(6, 6, 6))
                            .addGroup(angentPanelLayout.createSequentialGroup()
                                .addComponent(agentIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(agentNamnTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(agentLosenordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(agentAnstallningsdatumTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(agentTelefonTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(agentOmradeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(angentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(agentAdminCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(86, 86, 86)
                        .addComponent(andraAgentBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(taBortAgentBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(angentPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Agent", angentPanel);

        typCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ras", "Område", "Datum" }));
        typCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typCBActionPerformed(evt);
            }
        });

        alienListLST.setToolTipText("");
        alienListLST.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alienListLSTMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(alienListLST);

        valCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Squid", "Worm", "Boglodite" }));

        searchButton.setText("Sök");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        startDateTF.setText("2009-12-10");

        startDateLabel.setText("Startdate: ");

        endDateLabel.setText("Enddate:");

        endDateTF.setText("2010-10-10");

        alienIDTF.setEditable(false);

        alienNamnTF.setEditable(false);

        alienLosenordTF.setEditable(false);

        alienRegistreringsdatumTF.setEditable(false);

        alienTelefonTF.setEditable(false);

        alienPlatsTF.setEditable(false);

        alienAnsvarigAgentTF.setEditable(false);

        jLabel3.setText("Alien_ID:");

        jLabel4.setText("Registreringsdatum:");

        jLabel5.setText("Lösenord:");

        jLabel6.setText("Namn:");

        jLabel7.setText("Telefon:");

        jLabel8.setText("Plats:");

        jLabel9.setText("Ansvarig Agent: ");

        andraAlienBTN.setText("Ändra information");
        andraAlienBTN.setEnabled(false);
        andraAlienBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andraAlienBTNActionPerformed(evt);
            }
        });

        alienRasCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Squid", "Worm", "Boglodite" }));

        jLabel18.setText("Ras");

        taBortAlienBTN.setText("Ta bort alien");
        taBortAlienBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taBortAlienBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout alienPanelLayout = new javax.swing.GroupLayout(alienPanel);
        alienPanel.setLayout(alienPanelLayout);
        alienPanelLayout.setHorizontalGroup(
            alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alienPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(typCB, 0, 102, Short.MAX_VALUE))
                .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, alienPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(alienPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(valCB, 0, 102, Short.MAX_VALUE)
                            .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startDateLabel)
                            .addComponent(startDateTF)
                            .addComponent(endDateLabel)
                            .addComponent(endDateTF))
                        .addGap(198, 198, 198)
                        .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel18))
                        .addGap(53, 53, 53)))
                .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(taBortAlienBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(alienRegistreringsdatumTF)
                        .addComponent(alienRasCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(alienNamnTF, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(alienIDTF, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(alienAnsvarigAgentTF, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(alienPlatsTF, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(alienTelefonTF, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(andraAlienBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addComponent(alienLosenordTF)))
                .addContainerGap(295, Short.MAX_VALUE))
        );
        alienPanelLayout.setVerticalGroup(
            alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alienPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(alienPanelLayout.createSequentialGroup()
                        .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(alienPanelLayout.createSequentialGroup()
                                .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(searchButton)
                                        .addComponent(alienIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(alienPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(startDateLabel))
                                    .addGroup(alienPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel6))))
                            .addComponent(alienNamnTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alienLosenordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(alienRegistreringsdatumTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(alienPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(endDateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(alienPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(alienTelefonTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(alienPlatsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alienAnsvarigAgentTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(alienPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(alienRasCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addGap(41, 41, 41)
                        .addComponent(andraAlienBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(taBortAlienBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Aliens", alienPanel);

        omradenJPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                omradenJPanelComponentShown(evt);
            }
        });

        omradeList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        omradeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omradeListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(omradeList);

        jLabel32.setText("Valt område");

        valtOmradeTF.setEditable(false);

        jLabel33.setText("Nuvarande områdeschef");

        nuvarandeOmradesChefTF.setEditable(false);

        jLabel34.setText("Välj ny områdeschef");

        andraOmradesChefBTN.setText("Ändra chef");
        andraOmradesChefBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andraOmradesChefBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout omradenJPanelLayout = new javax.swing.GroupLayout(omradenJPanel);
        omradenJPanel.setLayout(omradenJPanelLayout);
        omradenJPanelLayout.setHorizontalGroup(
            omradenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omradenJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(200, 200, 200)
                .addGroup(omradenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(omradenJPanelLayout.createSequentialGroup()
                        .addGroup(omradenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33)
                            .addComponent(jLabel34))
                        .addGap(109, 109, 109)
                        .addGroup(omradenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(valdNyOmradeschefCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(valtOmradeTF, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(nuvarandeOmradesChefTF)))
                    .addComponent(andraOmradesChefBTN))
                .addContainerGap(212, Short.MAX_VALUE))
        );
        omradenJPanelLayout.setVerticalGroup(
            omradenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omradenJPanelLayout.createSequentialGroup()
                .addGroup(omradenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(omradenJPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(omradenJPanelLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(omradenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(valtOmradeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(omradenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel33)
                            .addComponent(nuvarandeOmradesChefTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(omradenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(valdNyOmradeschefCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34))
                        .addGap(42, 42, 42)
                        .addComponent(andraOmradesChefBTN)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Områden", omradenJPanel);

        jPanel1.setToolTipText("");

        verktygsNamnTF.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Namn :");

        laggTillVerktygBTN.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        laggTillVerktygBTN.setText("Lägg  till ");
        laggTillVerktygBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laggTillVerktygBTNActionPerformed(evt);
            }
        });

        utrustningsTypCB.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        utrustningsTypCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vapen", "Kommunikation", "Teknik" }));

        jLabel20.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel20.setText("Typ :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(utrustningsTypCB, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(laggTillVerktygBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                        .addComponent(verktygsNamnTF, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)))
                .addContainerGap(524, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verktygsNamnTF, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel20))
                    .addComponent(utrustningsTypCB, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addGap(94, 94, 94)
                .addComponent(laggTillVerktygBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(195, 195, 195))
        );

        jTabbedPane1.addTab("Lägg till utrustning", jPanel1);

        valdUtrustningCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valdUtrustningCBActionPerformed(evt);
            }
        });

        taBortUtrustningBTN.setText("Ta bort utrustning");
        taBortUtrustningBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taBortUtrustningBTNActionPerformed(evt);
            }
        });

        valdUtrustningTF.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(307, 307, 307)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(valdUtrustningCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(valdUtrustningTF, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(taBortUtrustningBTN, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(527, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(valdUtrustningCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(valdUtrustningTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(taBortUtrustningBTN)
                .addContainerGap(240, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ta bort utrustning", jPanel2);

        jLabel27.setText("Namn");

        jLabel28.setText("Telefon");

        jLabel29.setText("Administratör status");

        jLabel30.setText("Losenord");

        jLabel31.setText("Område");

        nyAgentAdminSatusCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JA", "NEJ" }));

        laggTillNyAgentBTN.setText("Lägg till");
        laggTillNyAgentBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laggTillNyAgentBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout registrereNyAgentPanelLayout = new javax.swing.GroupLayout(registrereNyAgentPanel);
        registrereNyAgentPanel.setLayout(registrereNyAgentPanelLayout);
        registrereNyAgentPanelLayout.setHorizontalGroup(
            registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registrereNyAgentPanelLayout.createSequentialGroup()
                .addGroup(registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(registrereNyAgentPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(laggTillNyAgentBTN))
                    .addGroup(registrereNyAgentPanelLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registrereNyAgentPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel29)
                                .addGap(36, 36, 36))
                            .addGroup(registrereNyAgentPanelLayout.createSequentialGroup()
                                .addGroup(registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel30)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel28)
                                    .addComponent(jLabel31))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nyAgentOmradeCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nyAgentAdminSatusCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nyAgentTelefonTF, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(nyAgentLosenordTF)
                            .addComponent(nyAgentNamnTF))))
                .addGap(654, 654, 654))
        );
        registrereNyAgentPanelLayout.setVerticalGroup(
            registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registrereNyAgentPanelLayout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(nyAgentNamnTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(nyAgentLosenordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(nyAgentTelefonTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(nyAgentAdminSatusCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrereNyAgentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(nyAgentOmradeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(laggTillNyAgentBTN)
                .addContainerGap(211, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Registrere ny agent", registrereNyAgentPanel);

        nyAlienNamnTF.setText("Namn");

        nyAlienLosenordTF.setText("Lösenord");

        nyAlienTelefonTF.setText("Telefon");

        laggTillAlienBTN.setText("Registrera");
        laggTillAlienBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laggTillAlienBTNActionPerformed(evt);
            }
        });

        nyAlienRasCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Squid", "Boglodite", "Worm" }));

        jLabel21.setText("Namn");

        jLabel22.setText("Lösenord");

        jLabel23.setText("Telefon");

        jLabel24.setText("Plats");

        jLabel25.setText("Ansvarig agent");

        jLabel26.setText("Ras");

        javax.swing.GroupLayout registrereaAlienJPanelLayout = new javax.swing.GroupLayout(registrereaAlienJPanel);
        registrereaAlienJPanel.setLayout(registrereaAlienJPanelLayout);
        registrereaAlienJPanelLayout.setHorizontalGroup(
            registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registrereaAlienJPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(registrereaAlienJPanelLayout.createSequentialGroup()
                        .addGroup(registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24)
                            .addComponent(jLabel25)
                            .addComponent(jLabel26))
                        .addGap(124, 124, 124)
                        .addGroup(registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nyAlienNamnTF, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nyAlienLosenordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nyAlienTelefonTF, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nyAlienPlatsCB, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nyAlienRasCB, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nyAlienAACB, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(laggTillAlienBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(595, Short.MAX_VALUE))
        );
        registrereaAlienJPanelLayout.setVerticalGroup(
            registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registrereaAlienJPanelLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(registrereaAlienJPanelLayout.createSequentialGroup()
                        .addGroup(registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nyAlienNamnTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nyAlienLosenordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addGap(18, 18, 18)
                        .addGroup(registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nyAlienTelefonTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nyAlienPlatsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nyAlienAACB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(registrereaAlienJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nyAlienRasCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addGap(52, 52, 52)
                .addComponent(laggTillAlienBTN)
                .addContainerGap(186, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Registrera ny alien", registrereaAlienJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Uppdaterar listor och comboboxes. Borde köras varje gång databesen har upppdaterats!
    private void uppdateraListorOchCB() {
        try {

            // Fyller combobox för att väljany kontorschef
            for (String namn : idb.fetchColumn("SELECT namn FROM agent")) {
                nyKontorsChefCB.addItem(namn);
            }

            // Skriver ut vem som är kontorschef i nuvarandeKontorsChefTF
            String kontorChefNamn = idb.fetchSingle("SELECT agent.Namn FROM kontorschef "
                    + "INNER JOIN agent ON kontorschef.Agent_ID = agent.Agent_ID");
            nuvarandeKontorsChefTF.setText(kontorChefNamn);

            // Fyller listan med utrrustning som kan tas bort
            for (String benamning : idb.fetchColumn("SELECT benamning FROM Utrustning")) {
                valdUtrustningCB.addItem(benamning);
            }

            // Fyller nyAlienAACB med agenter
            nyAlienAACB.removeAllItems();
            for (String namn : idb.fetchColumn("SELECT Namn FROM Agent")) {
                nyAlienAACB.addItem(namn);
            }
            // Fyller nyAlienPlatsCB med platser
            nyAlienPlatsCB.removeAllItems();
            for (String plats : idb.fetchColumn("SELECT Benamning FROM plats")) {
                nyAlienPlatsCB.addItem(plats);
            }

            // Fyller nyAgentOmradeCB med områden
            nyAgentOmradeCB.removeAllItems();
            for (String omrade : idb.fetchColumn("SELECT Benamning FROM omrade")) {
                nyAgentOmradeCB.addItem(omrade);
            }

            // fyller listan till att välja ny omtådes chef m,ed de agenter som kan väljas
            for (String namn : idb.fetchColumn("Select Namn from Agent where Agent_ID Not IN (select Agent_ID from Omradeschef)")) {
                valdNyOmradeschefCB.addItem(namn);
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Fel med databaskoppling");
            System.out.println("Felet" + e);
        }
    }

    // Retunerar true om namnet redan finns i databasen annars false
    private boolean finnsAgentNamn(String inputNamn) {

        try {
            for (String agentNamn : idb.fetchColumn("SELECT Namn FROM agent")) {
                if (inputNamn.equalsIgnoreCase(agentNamn)) {
                    return true;
                }

            }
        } catch (InfException ex) {
            Logger.getLogger(AgentFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    // Retunerar vilken subbklass som ID tillhör
    private String vilkenSubklass(String huvudKlass, String inputID) {

        String[] subklasser;

        try {
            switch (huvudKlass) {
                case "agent" -> {
                    subklasser = new String[]{"faltagent", "kontorschef", "omradeschef"};

                    for (String subklass : subklasser) {
                        System.out.println("SELECT Agent_ID FROM " + subklass);
                        for (String id : idb.fetchColumn("SELECT Agent_ID FROM " + subklass)) {
                            if (id.equals(inputID)) {
                                return subklass;
                            }
                        }
                    }
                }

                case "alien" -> {
                    subklasser = new String[]{"worm", "squid", "boglodite"};
                    for (String subklass : subklasser) {
                        System.out.println("SELECT Alien_ID FROM " + subklass);
                        for (String id : idb.fetchColumn("SELECT Alien_ID FROM " + subklass)) {
                            if (id.equals(inputID)) {
                                return subklass;
                            }
                        }
                    }
                }
                case "utrustning" -> {
                    subklasser = new String[]{"vapen", "teknik", "kommunikation"};
                    for (String subklass : subklasser) {
                        System.out.println("SELECT Utrustnings_ID FROM " + subklass);
                        for (String id : idb.fetchColumn("SELECT Utrustnings_ID FROM " + subklass)) {
                            if (id.equals(inputID)) {
                                return subklass;
                            }
                        }
                    }
                }
            }

        } catch (InfException ex) {
            Logger.getLogger(AgentFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Något gick fel");

        }
        return null;
    }


    private void bytLosenordBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bytLosenordBTNActionPerformed
        // TODO add your handling code here:

        // Testar om alla fält är i fylda. Om de inte skulla vara det så avbryts lösenords bytningen
        if (gammaltLosenordTF.getText().equals("") || nyttLosenordTF.getText().equals("") || nyttLosenordTestTF.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Du måste fylla i alla fällt!");
            return;
        }

        try {

            String nyttLosenord = nyttLosenordTF.getText();

            // Testar om det nya lösenordet mtachar kontrollen annars avbryts lösenords bytningen
            if (!nyttLosenordTF.getText().equals(nyttLosenordTestTF.getText())) {
                JOptionPane.showMessageDialog(null, "Lösenorden mtachar inte försök igen!");
                return;
            }

            // Testar om det gammla lösenordet matchar det som finns i databasen om det inte skulle det så avbryts lösenords bytningen
            if (!idb.fetchSingle("SELECT Losenord FROM agent WHERE Namn = '" + inLoggadAdminNamn + "'").equals(gammaltLosenordTF.getText())) {
                JOptionPane.showMessageDialog(null, "Du skrev in fel lösenord försök igen!");
                return;
            }

            if (JOptionPane.showConfirmDialog(null, "Är du säkerpå att du vill byta lösenord?", "Ja",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Bytning avbröts!");
            }
            String query = "UPDATE agent SET Losenord = '" + nyttLosenord + "' WHERE Namn = '" + inLoggadAdminNamn + "'";
            idb.update(query); // Uppdaterar databasen
            JOptionPane.showMessageDialog(null, "Lösenord har nu bytits!");

        } catch (InfException ex) {
            Logger.getLogger(AgentFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Något gick fel försök igen.");
        }

    }//GEN-LAST:event_bytLosenordBTNActionPerformed

    private void typCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typCBActionPerformed
        // TODO add your handling code here:
        valCB.setVisible(true);
        endDateLabel.setVisible(false);
        endDateTF.setVisible(false);
        startDateLabel.setVisible(false);
        startDateTF.setVisible(false);
        valCB.removeAllItems();

        String typ = (String) typCB.getSelectedItem();

        try {

            switch (typ) {

                case "Område":
                    for (String omrade : idb.fetchColumn("SELECT Benamning FROM omrade")) {
                        valCB.addItem(omrade);
                    }
                    break;
                case "Ras":
                    valCB.addItem("Squid");
                    valCB.addItem("Boglodite");
                    valCB.addItem("Worm");
                    break;
                case "Datum":
                    endDateLabel.setVisible(true);
                    endDateTF.setVisible(true);
                    startDateLabel.setVisible(true);
                    startDateTF.setVisible(true);
                    valCB.setVisible(false);
                    break;
                default:

            }

        } catch (InfException ex) {
            Logger.getLogger(AgentFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_typCBActionPerformed

    private void alienListLSTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alienListLSTMouseClicked
        // TODO add your handling code here:

        String selectedAlien = (String) alienListLST.getSelectedValue();

        if (selectedAlien != null) {

            String query = "SELECT * FROM alien WHERE Namn = '" + selectedAlien + "'";

            try {
                HashMap<String, String> alien = new HashMap<String, String>();
                alien = idb.fetchRow(query);

                String plats, ansvarigAgent;

                plats = idb.fetchSingle("SELECT Benamning FROM omrade WHERE Omrades_ID = " + alien.get("Plats"));

                ansvarigAgent = idb.fetchSingle("SELECT Namn FROM agent WHERE Agent_ID = " + alien.get("Ansvarig_Agent"));

                alienIDTF.setText(alien.get("Alien_ID"));
                alienNamnTF.setText(alien.get("Namn"));
                alienLosenordTF.setText(alien.get("Losenord"));
                alienRegistreringsdatumTF.setText(alien.get("Registreringsdatum"));
                alienTelefonTF.setText(alien.get("Telefon"));
                alienPlatsTF.setText(plats);
                alienAnsvarigAgentTF.setText(ansvarigAgent);

                andraAlienBTN.setEnabled(true);
            } catch (InfException ex) {
                Logger.getLogger(AgentFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_alienListLSTMouseClicked

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        DefaultListModel alienListModel = new DefaultListModel();
        alienListLST.setModel(alienListModel);
        alienListModel.clear();
        String query;
        String val = (String) valCB.getSelectedItem();
        try {
            switch (typCB.getSelectedItem().toString()) {
                case "Ras" -> {
                    query = "SELECT Alien_ID FROM " + val.toLowerCase();
                    for (String id : idb.fetchColumn(query)) {
                        query = "SELECT Namn FROM alien WHERE Alien_ID = " + id;
                        String alienNamn = idb.fetchSingle(query);
                        //alienList.put(id, alienNamn);
                        alienListModel.addElement(alienNamn);
                    }
                }
                case "Område" -> {
                    query = "SELECT Namn,Alien_ID FROM Alien WHERE Plats = " + idb.fetchSingle("SELECT Omrades_ID FROM omrade WHERE Benamning = '" + val.toLowerCase() + "'");
                    for (HashMap<String, String> alien : idb.fetchRows(query)) {
                        //alienList.put(alien.get("Alien_ID"),alien.get("Namn"));
                        alienListModel.addElement(alien.get("Namn"));
                    }
                }
                case "Datum" -> {
                    SimpleDateFormat format = new SimpleDateFormat("yyy-mm-dd");
                    Date startDate, endDate, alienDate;
                    startDate = format.parse(startDateTF.getText());
                    endDate = format.parse(endDateTF.getText());
                    query = "SELECT Namn,Registreringsdatum,Alien_ID FROM alien";
                    for (HashMap<String, String> alien : idb.fetchRows(query)) {

                        alienDate = format.parse(alien.get("Registreringsdatum"));

                        if (alienDate.getTime() >= startDate.getTime() && alienDate.getTime() < endDate.getTime()) {
                            //alienList.put(alien.get("Alien_ID"),alien.get("Namn"));
                            alienListModel.addElement(alien.get("Namn"));
                        }
                    }
                }
                default -> {

                }
            }

        } catch (InfException ex) {
            Logger.getLogger(AgentFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void andraAlienBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andraAlienBTNActionPerformed
        // TODO add your handling code here:
        boolean bool = !alienIDTF.isEditable();

        alienIDTF.setEditable(bool);
        alienNamnTF.setEditable(bool);
        alienLosenordTF.setEditable(bool);
        alienRegistreringsdatumTF.setEditable(bool);
        alienTelefonTF.setEditable(bool);
        alienPlatsTF.setEditable(bool);
        alienAnsvarigAgentTF.setEditable(bool);

        if (bool) {
            andraAlienBTN.setText("Bekräfta ändringar");
        } else {
            andraAlienBTN.setText("Ändra information");

            if (JOptionPane.showConfirmDialog(null, "Are you sure?", "Yes", JOptionPane.YES_NO_OPTION) == 0) {
                // Insert new values into the database

                try {
                    int alienID, plats, ansvarigAgent;
                    alienID = Integer.valueOf(alienIDTF.getText());
                    plats = Integer.valueOf(idb.fetchSingle("SELECT Omrades_ID FROM omrade WHERE Benamning = '" + alienPlatsTF.getText() + "'"));
                    ansvarigAgent = Integer.valueOf(idb.fetchSingle("SELECT Agent_ID FROM agent WHERE Namn = '" + alienAnsvarigAgentTF.getText() + "'"));

                    String registreringsdatum, losenord, namn, telefon;
                    registreringsdatum = alienRegistreringsdatumTF.getText();
                    losenord = alienLosenordTF.getText();
                    namn = alienNamnTF.getText();
                    telefon = alienTelefonTF.getText();

                    String query = String.format("UPDATE alien SET Alien_ID = %o, Registreringsdatum = '%s', Losenord = '%s', Namn = '%s', Telefon = '%s', Plats = %o, Ansvarig_Agent = %o WHERE Alien_ID = %o",
                            alienID, registreringsdatum, losenord, namn, telefon, plats, ansvarigAgent, alienID);
                    idb.update(query);

                    idb.delete("");

                } catch (InfException ex) {
                    Logger.getLogger(AgentFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

            }

        }

    }//GEN-LAST:event_andraAlienBTNActionPerformed

    private void omradenJPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_omradenJPanelComponentShown
        // FYLLER LISTAN MED OMRÅDEN
        try {
            String query;
            DefaultListModel omradeModelList = new DefaultListModel();
            omradeList.setModel(omradeModelList);

            omradeModelList.removeAllElements();
            query = "SELECT agent.`Namn`,omrade.`Benamning`"
                    + "     FROM agent"
                    + "     INNER JOIN omradeschef ON agent.`Agent_ID`=omradeschef.`Agent_ID` "
                    + "     INNER JOIN omrade ON omradeschef.`Omrade`=omrade.`Omrades_ID`";
            for (HashMap<String, String> omradeschef : idb.fetchRows(query)) {
                omradeModelList.addElement(omradeschef.get("Benamning") + "     Chef: " + omradeschef.get("Namn"));
            }
        } catch (InfException ex) {
            Logger.getLogger(AgentFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_omradenJPanelComponentShown

    private void laggTillVerktygBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laggTillVerktygBTNActionPerformed
        // TODO add your handling code here:
        try {
            // Sparar verktygets ID och namn i två olik variabler
            int verktygsID = Integer.parseInt(idb.fetchSingle("Select max(Utrustnings_ID) from Utrustning")) + 1;
            String verktygsNamn = verktygsNamnTF.getText();
            String utrustningsTyp = utrustningsTypCB.getSelectedItem().toString().toLowerCase();
            if (JOptionPane.showConfirmDialog(null, "Är du säker på att du vill lägga till verktyget: " + verktygsNamn, "Ja",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Tillläggning har avbrutits.");
                return;
            }

            // Lägger in utrustning i dess subklass
            switch (utrustningsTyp) {
                case "vapen" -> {
                    String kaliber = JOptionPane.showInputDialog("Vilken kaliber har den?");
                    if (kaliber == null) {
                        return; // Om användaren klicka på "cancel" så avbtyts allt
                    }
                    idb.insert("INSERT INTO vapen "
                            + "Values(" + verktygsID + "," + kaliber + ")");
                }
                case "kommunikation" -> {
                    String overforingsteknik = JOptionPane.showInputDialog("Vilken överföringsteknik har den??");
                    if (overforingsteknik == null) {
                        return; // Om användaren klicka på "cancel" så avbtyts allt
                    }
                    idb.insert("INSERT INTO kommunikation "
                            + "Values(" + verktygsID + ", '" + overforingsteknik + "' )");
                }
                case "teknik" -> {
                    String kraftKalla = JOptionPane.showInputDialog("Vilken kraftkälla har den??");
                    if (kraftKalla == null) {
                        return; // Om användaren klicka på "cancel" så avbtyts allt
                    }
                    idb.insert("INSERT INTO teknik "
                            + "Values(" + verktygsID + "," + kraftKalla + ")");
                }
            }

            // Sätter in givet verktyg i databaesn och skickar ut en bekräftelse om det funka eller inte
            idb.insert("Insert into Utrustning values('" + verktygsID + "','" + verktygsNamn + "')");
            verktygsNamnTF.setText("");
            JOptionPane.showMessageDialog(null, "Utrustningen " + verktygsNamn + " har registrerats");

        } catch (InfException ex) {

            JOptionPane.showMessageDialog(null, "Registrering misslyckades");

        }
    }//GEN-LAST:event_laggTillVerktygBTNActionPerformed

    private void angentPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_angentPanelComponentShown
        // TODO add your handling code here:
        DefaultListModel agenModelList = new DefaultListModel();
        agentList.setModel(agenModelList);
        agenModelList.removeAllElements();
        try {

            // Fyller agent listan med agenter
            for (String agent : idb.fetchColumn("SELECT Namn FROM agent")) {
                agenModelList.addElement(agent);
            }

            // Fyller omtådeCB med områden
            for (String omrade : idb.fetchColumn("SELECT Benamning FROM omrade")) {
                agentOmradeCB.addItem(omrade);
            }

        } catch (InfException ex) {

            JOptionPane.showMessageDialog(null, "Registrering misslyckades");

        }
    }//GEN-LAST:event_angentPanelComponentShown

    private void agentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_agentListValueChanged
        // TODO add your handling code here:
        if (agentList.getSelectedValue() != null) {
            taBortAgentBTN.setEnabled(true);
            andraAgentBTN.setEnabled(true);

            HashMap<String, String> agent = new HashMap<String, String>();
            try {

                agent = idb.fetchRow("SELECT * FROM agent WHERE namn = '" + agentList.getSelectedValue() + "'");
                agentIDTF.setText(agent.get("Agent_ID"));
                agentNamnTF.setText(agent.get("Namn"));
                agentLosenordTF.setText(agent.get("Losenord"));
                agentAnstallningsdatumTF.setText(agent.get("Anstallningsdatum"));
                agentTelefonTF.setText(agent.get("Telefon"));
                agentOmradeCB.setSelectedItem(idb.fetchSingle("SELECT omrade.Benamning FROM omrade "
                        + "INNER JOIN agent on omrade.Omrades_ID = agent.omrade "
                        + "WHERE agent.Agent_ID = " + agent.get("Agent_ID")));
                if (idb.fetchSingle("SELECT Administrator FROM agent WHERE Agent_ID = " + agent.get("Agent_ID")).equals("N")) {
                    agentAdminCB.setSelectedItem("NEJ");
                } else {
                    agentAdminCB.setSelectedItem("JA");
                }

            } catch (InfException ex) {
                JOptionPane.showMessageDialog(null, "Registrering misslyckades");
            }

        }
    }//GEN-LAST:event_agentListValueChanged

    private void andraAgentBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andraAgentBTNActionPerformed
        // TODO add your handling code here:
        boolean bool = !agentIDTF.isEditable();

        if (bool) {
            andraAgentBTN.setText("Bekräfta ändringar");
            agentIDTF.setEditable(bool);
            agentNamnTF.setEditable(bool);
            agentLosenordTF.setEditable(bool);
            agentAnstallningsdatumTF.setEditable(bool);
            agentTelefonTF.setEditable(bool);
            agentOmradeCB.setEnabled(bool);
            agentAdminCB.setEnabled(bool);
        } else {
            andraAgentBTN.setText("Ändra information");

            if (JOptionPane.showConfirmDialog(null, "Are you sure?", "Yes", JOptionPane.YES_NO_OPTION) == 0) {
                // Insert new values into the database

                try {

                    int agentID, agentOmrade;
                    agentID = Integer.valueOf(agentIDTF.getText());
                    agentOmrade = Integer.valueOf(idb.fetchSingle("SELECT Omrades_ID FROM OMRADE WHERE Benamning = '" + agentOmradeCB.getSelectedItem().toString() + "'"));

                    String nyttAgentNamn, gammaltAgentNamn, nyttAgentLosenord, nyttAgentDatum, nyttAgentTelefon;
                    nyttAgentNamn = agentNamnTF.getText();
                    gammaltAgentNamn = agentList.getSelectedValue();
                    nyttAgentLosenord = agentLosenordTF.getText();
                    nyttAgentDatum = agentAnstallningsdatumTF.getText();
                    nyttAgentTelefon = agentTelefonTF.getText();

                    char agentAdmin;
                    agentAdmin = agentAdminCB.getSelectedItem().toString().charAt(0);

                    String query = String.format("UPDATE agent "
                            + "SET Agent_ID = %o, Namn = '%s', Losenord = '%s', Telefon = '%s', Anstallningsdatum = '%s', Administrator = '%s', omrade = %o "
                            + "WHERE Agent_ID = %o",
                            agentID, nyttAgentNamn, nyttAgentLosenord, nyttAgentTelefon, nyttAgentDatum, agentAdmin, agentOmrade, agentID);

                    if (!finnsAgentNamn(nyttAgentNamn) || nyttAgentNamn.equals(gammaltAgentNamn)) {
                        idb.update(query);
                        agentIDTF.setEditable(bool);
                        agentNamnTF.setEditable(bool);
                        agentLosenordTF.setEditable(bool);
                        agentAnstallningsdatumTF.setEditable(bool);
                        agentTelefonTF.setEditable(bool);
                        agentOmradeCB.setEnabled(bool);
                        agentAdminCB.setEnabled(bool);
                        JOptionPane.showMessageDialog(null, "Agenten har ändrats!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Namnet finns redan välj ett nytt!");
                    }
                    uppdateraListorOchCB();
                } catch (InfException ex) {
                    Logger.getLogger(AgentFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }

        }


    }//GEN-LAST:event_andraAgentBTNActionPerformed

    private void taBortAgentBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taBortAgentBTNActionPerformed
        // TODO add your handling code here:
        int val = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ta bort?", "Bekräfta",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (val == JOptionPane.YES_OPTION) {
            try {

                String valdAgentID = agentIDTF.getText();

                // Ifall agenten var ansvarig för en alien så byts den ut måt en ny här
                for (HashMap<String, String> alien : idb.fetchRows("SELECT Alien_ID,Namn,Ansvarig_Agent FROM alien")) {
                    if (alien.get("Ansvarig_Agent").equals(valdAgentID)) {

                        String nyAnsvarigAgent = JOptionPane.showInputDialog(null, "Välj den nya asvariga agenten för " + alien.get("Namn"), "Ny ansvarig agent",
                                JOptionPane.QUESTION_MESSAGE, null, idb.fetchColumn("SELECT namn FROM agent").toArray(), null).toString();

                        idb.update("UPDATE alien "
                                + "SET Ansvarig_Agent = " + idb.fetchSingle("SELECT Agent_ID FROM agent WHERE namn = '" + nyAnsvarigAgent + "' ")
                                + "WHERE Alien_ID = " + alien.get("Alien_ID"));

                    }

                }

                // Ifall agenten "innehar" dsv låndade någon utrustning tas det bort här 
                for (HashMap<String, String> lanadUtrustning : idb.fetchRows("SELECT Agent_ID FROM innehar_utrustning")) {
                    if (lanadUtrustning.get("Agent_ID").equals(valdAgentID)) {
                        idb.delete("DELETE FROM innehar_utrustning "
                                + "WHERE Agent_ID = " + valdAgentID);
                    }
                }

                // Ifall agenten "innehar" dsv låndade något fordon tas det bort här 
                for (HashMap<String, String> lanadFordon : idb.fetchRows("SELECT Agent_ID FROM innehar_fordon")) {
                    if (lanadFordon.get("Agent_ID").equals(valdAgentID)) {
                        idb.delete("DELETE FROM innehar_fordon "
                                + "WHERE Agent_ID = " + valdAgentID);
                    }
                }

                // Tar agent_id Från den subklass som den finns i!
                idb.delete("DELETE FROM " + vilkenSubklass("agent", valdAgentID) + " WHERE Agent_ID = " + valdAgentID);;

                // Tar bort agenten från agent tabellen
                idb.delete("DELETE FROM agent WHERE Agent_ID = '" + valdAgentID + "'");
                JOptionPane.showMessageDialog(null, "Nu har en Agent tagits bort");
                uppdateraListorOchCB();
            } catch (InfException ex) {
                Logger.getLogger(AgentFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Något gick fel");

            }
        } else if (val == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(null, "Borttagning har avbrutits");
        }
    }//GEN-LAST:event_taBortAgentBTNActionPerformed

    private void andraKontorsChefBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andraKontorsChefBTNActionPerformed
        // TODO add your handling code here:
        try {
            String ValdKontorsChef = nyKontorsChefCB.getSelectedItem().toString();
            int Agentets_ID = Integer.parseInt(idb.fetchSingle("Select Agent_ID FROM Agent where namn = '" + ValdKontorsChef + "'"));
            idb.update("UPDATE Kontorschef Set Agent_ID = '" + Agentets_ID + "' where kontorsbeteckning ='Örebrokontoret'");
            nuvarandeKontorsChefTF.setText(ValdKontorsChef);
            JOptionPane.showMessageDialog(null, "Kontorchefen har nu uppdaterats");

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println("Felet " + e);
        }

    }//GEN-LAST:event_andraKontorsChefBTNActionPerformed

    private void taBortAlienBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taBortAlienBTNActionPerformed
        // TODO add your handling code here:

        String valdAlienID = alienIDTF.getText();

        int val = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ta bort?", "Bekräfta",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (val == JOptionPane.YES_OPTION) {

            try {

                // Tar bort alien från dess ras klass
                idb.delete("DELETE FROM " + vilkenSubklass("alien", valdAlienID));

                // Tar bort alienen fron alien tabellen
                idb.delete("DELETE FROM alien WHERE Alien_ID = " + valdAlienID);

            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, "Något gick fel");
                System.out.println("Felet " + e);
            }
            uppdateraListorOchCB();
        } else {
            JOptionPane.showMessageDialog(null, "Borttagning har avbrutits");
        }

    }//GEN-LAST:event_taBortAlienBTNActionPerformed

    private void taBortUtrustningBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taBortUtrustningBTNActionPerformed
        // TODO add your handling code here:
        //Dialogruta som bekräftar radering
        //Dialogrutan visar svaret av bekräftningen
        int svar = JOptionPane.showConfirmDialog(null, "Vill du verkligen radera " + valdUtrustningCB.getSelectedItem().toString() + "?", "Bekräfta", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        //(this. "Vill du verkligen radera = " + cbValjutrustning.getSelectedItem().toString()  + "?");

        //om valet är Ja
        if (svar == JOptionPane.YES_OPTION) {

            try {
                //Benamning = vill få in det som man valt i comboboxen...

                String utrustningsID = idb.fetchSingle("SELECT Utrustnings_ID FROM utrustning WHERE Benamning = '" + valdUtrustningCB.getSelectedItem().toString() + "'");

                // Ifall agenten "innehar" dsv låndade någon utrustning tas det bort här 
                for (HashMap<String, String> lanadUtrustning : idb.fetchRows("SELECT Utrustnings_ID FROM innehar_utrustning")) {
                    if (lanadUtrustning.get("Utrustnings_ID").equals(utrustningsID)) {
                        /*idb.delete("DELETE FROM innehar_utrustning "
                                + "WHERE Utrustnings_ID = " + utrustningsID);*/
                    }
                }

                // Tar bort från den subklass som utrustningen ligger i   
                idb.delete("DELETE FROM " + vilkenSubklass("utrustning", utrustningsID) + " WHERE Utrustnings_ID = " + utrustningsID);

                // Tar bort utrustningen från utrustnings tabellen
                idb.delete("DELETE FROM Utrustning WHERE Utrustnings_ID ='" + utrustningsID + "'");

                JOptionPane.showMessageDialog(null, "Utrustningen" + valdUtrustningCB.getSelectedItem().toString() + "har tagits bort.");
                uppdateraListorOchCB();

            } catch (InfException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Ett fel har uppstått");

            }
            //Om valet är nej
        } else if (svar == JOptionPane.NO_OPTION) {
            System.out.println("Alternativ radera ej är valt");

        }

    }//GEN-LAST:event_taBortUtrustningBTNActionPerformed

    private void valdUtrustningCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valdUtrustningCBActionPerformed
        // TODO add your handling code here:
        valdUtrustningTF.setText(valdUtrustningCB.getSelectedItem().toString());
    }//GEN-LAST:event_valdUtrustningCBActionPerformed

    private void laggTillAlienBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laggTillAlienBTNActionPerformed
        // TODO add your handling code here:

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM/dd");
        LocalDateTime now = LocalDateTime.now();

        try {

            // Hämtar och sätter alla värden till den nya alienen
            String namn, losenord, date, telefon, ras;
            namn = nyAlienNamnTF.getText();
            losenord = nyAlienLosenordTF.getText();
            telefon = nyAlienTelefonTF.getText();
            date = dtf.format(now).replace('/', '-');
            ras = ((String) nyAlienRasCB.getSelectedItem()).toLowerCase();

            int id, plats, ansvarigAgent;
            id = Integer.valueOf(idb.fetchSingle("SELECT * FROM alien ORDER BY Alien_ID DESC")) + 1;
            plats = Integer.valueOf(idb.fetchSingle("SELECT Plats_ID FROM plats WHERE Benamning = '" + (String) nyAlienPlatsCB.getSelectedItem() + "'"));
            ansvarigAgent = Integer.valueOf(idb.fetchSingle("SELECT Agent_ID FROM agent WHERE Namn = '" + (String) nyAlienAACB.getSelectedItem() + "'"));

            // SQL frågan som kommer användas för att registrerea den nya alienen
            String query = String.format("INSERT INTO alien VALUES (%o, '%s', '%s', '%s', '%s' , %o, %o)",
                    id, date, losenord, namn, telefon, plats, ansvarigAgent);

            if (JOptionPane.showConfirmDialog(null, "Är du säkerpå att du vill lägga till den nya alienen: " + namn, "Ja",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Tillläggning har avbrutits.");
                return;
            }

            // Tittar så namnet inte finns 
            for (String alien : idb.fetchColumn("SELECT Namn FROM alien")) {
                if (alien.equalsIgnoreCase(namn)) {
                    JOptionPane.showMessageDialog(null, "Namnet finns redan!");
                    return;
                }
            }

            // Sätter in den angivna alienen i databasen
            idb.insert(query);

            // Bestämmer vilket antal armar/boogies som alienen ska ha beroende på dess ras
            query = switch (ras) {
                case "squid" ->
                    String.format("INSERT INTO %s VALUES (%o,%s)", ras, id, JOptionPane.showInputDialog("Hur många armar har den?"));
                case "boglodite" ->
                    String.format("INSERT INTO %s VALUES (%o ,%s)", ras, id, JOptionPane.showInputDialog("Hur många boogies har den?"));
                default ->
                    String.format("INSERT INTO %s VALUES (%o)", ras, id);
            };

            // Sätter in alien_id i den angivna tabellen med dess "antal"
            idb.insert(query);

            JOptionPane.showMessageDialog(null, "Alienen: " + namn + " Hhar bilivit tilaggd");
            uppdateraListorOchCB();

        } catch (InfException ex) {
            Logger.getLogger(AgentFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Något gick fel försök igen.");
        }
    }//GEN-LAST:event_laggTillAlienBTNActionPerformed

    private void laggTillNyAgentBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laggTillNyAgentBTNActionPerformed
        // TODO add your handling code here:
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
        LocalDateTime now = LocalDateTime.now();

        try {

            // Hämtar och sätter alla värden till den nya alienen
            String namn, losenord, datum, telefon;
            namn = nyAgentNamnTF.getText();
            losenord = nyAgentLosenordTF.getText();
            datum = dtf.format(now).replace('/', '-');
            telefon = nyAgentTelefonTF.getText();

            char adminStatus;
            adminStatus = nyAgentAdminSatusCB.getSelectedItem().toString().toLowerCase().charAt(0);

            int id, omrade;
            id = Integer.valueOf(idb.fetchSingle("SELECT Agent_ID FROM agent ORDER BY Agent_ID DESC")) + 1;
            omrade = Integer.valueOf(idb.fetchSingle("SELECT Omrades_ID FROM omrade WHERE Benamning = '" + nyAgentOmradeCB.getSelectedItem().toString() + "'"));

            // SQL frågan som kommer användas för att registrerea den nya alienen
            if (JOptionPane.showConfirmDialog(null, "Är du säkerpå att du vill lägga till den nya alienen: " + namn, "Ja",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Tillläggning har avbrutits.");
                return;
            }

            // Tittar så namnet inte finns 
            for (String agent : idb.fetchColumn("SELECT Namn FROM agent")) {
                if (agent.equalsIgnoreCase(namn)) {
                    JOptionPane.showMessageDialog(null, "Namnet finns redan!");
                    return;
                }
            }

            String query = String.format("INSERT INTO agent VALUES (%o, '%s', '%s', '%s', '%s' , %s, %o)",
                    id, namn, telefon, datum, adminStatus, losenord, omrade);
            System.out.println(query);
            // Sätter in den angivna alienen i databasen
            idb.insert(query);

            // Sätter in att agenten är en fältagent
            idb.insert("INSERT INTO faltagent "
                    + "Values( " + id + ")");

            JOptionPane.showMessageDialog(null, "Agenten: " + namn + " Hhar bilivit tilaggd");
            uppdateraListorOchCB();

        } catch (InfException ex) {
            Logger.getLogger(AgentFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Något gick fel försök igen.");
        }
    }//GEN-LAST:event_laggTillNyAgentBTNActionPerformed

    private void omradeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omradeListMouseClicked
        // TODO add your handling code here:
        if (omradeList.getSelectedValue() == null) {
            return;
        }

        valtOmradeTF.setText(omradeList.getSelectedValue().split(" ")[0].stripIndent());
        nuvarandeOmradesChefTF.setText(omradeList.getSelectedValue().split(":")[1].stripIndent());
    }//GEN-LAST:event_omradeListMouseClicked

    private void andraOmradesChefBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andraOmradesChefBTNActionPerformed
        // TODO add your handling code here:
        try {

            String nurvarandeOmradesChefsNamn = nuvarandeOmradesChefTF.getText();
            System.out.println("SELECT Agent_ID FROM agent WHERE namn = '" + nurvarandeOmradesChefsNamn + "'");
            String nurvarandeOmradesChefsID = idb.fetchSingle("SELECT Agent_ID FROM agent WHERE namn = '" + nurvarandeOmradesChefsNamn + "'");

            String nyValdOmradesChefsNamn = valdNyOmradeschefCB.getSelectedItem().toString();
            String nyValdOmradesChefsID = idb.fetchSingle("Select Agent_ID from Agent where namn = '" + nyValdOmradesChefsNamn + "'  ");
            
            System.out.println("Update Omradeschef Set Agent_ID = '" + nyValdOmradesChefsID + "' where Agent_ID = '" + nurvarandeOmradesChefsID + "'");
            idb.update("Update Omradeschef Set Agent_ID = '" + nyValdOmradesChefsID + "' where Agent_ID = '" + nurvarandeOmradesChefsID + "'");

            nuvarandeOmradesChefTF.setText(nyValdOmradesChefsNamn);

            JOptionPane.showMessageDialog(null, "Områdeschef har nu uppdaterats");

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Nåot gick fel");
            System.out.println("Felet är " + e);
        }
    }//GEN-LAST:event_andraOmradesChefBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        InfDB db;
        try {
            db = new InfDB("mibdb", "3306", "mibdba", "mibkey");

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new AdminFrame(db, "Agent O").setVisible(true);
                }
            });
        } catch (InfException ex) {

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> agentAdminCB;
    private javax.swing.JTextField agentAnstallningsdatumTF;
    private javax.swing.JTextField agentIDTF;
    private javax.swing.JList<String> agentList;
    private javax.swing.JTextField agentLosenordTF;
    private javax.swing.JTextField agentNamnTF;
    private javax.swing.JComboBox<String> agentOmradeCB;
    private javax.swing.JTextField agentTelefonTF;
    private javax.swing.JTextField alienAnsvarigAgentTF;
    private javax.swing.JTextField alienIDTF;
    private javax.swing.JList<String> alienListLST;
    private javax.swing.JTextField alienLosenordTF;
    private javax.swing.JTextField alienNamnTF;
    private javax.swing.JPanel alienPanel;
    private javax.swing.JTextField alienPlatsTF;
    private javax.swing.JComboBox<String> alienRasCB;
    private javax.swing.JTextField alienRegistreringsdatumTF;
    private javax.swing.JTextField alienTelefonTF;
    private javax.swing.JButton andraAgentBTN;
    private javax.swing.JButton andraAlienBTN;
    private javax.swing.JButton andraKontorsChefBTN;
    private javax.swing.JToggleButton andraOmradesChefBTN;
    private javax.swing.JPanel angentPanel;
    private javax.swing.JButton bytLosenordBTN;
    private javax.swing.JLabel endDateLabel;
    private javax.swing.JTextField endDateTF;
    private javax.swing.JTextField gammaltLosenordTF;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel inloggadAgentNamnLBL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton laggTillAlienBTN;
    private javax.swing.JButton laggTillNyAgentBTN;
    private javax.swing.JButton laggTillVerktygBTN;
    private javax.swing.JTextField nuvarandeKontorsChefTF;
    private javax.swing.JTextField nuvarandeOmradesChefTF;
    private javax.swing.JComboBox<String> nyAgentAdminSatusCB;
    private javax.swing.JTextField nyAgentLosenordTF;
    private javax.swing.JTextField nyAgentNamnTF;
    private javax.swing.JComboBox<String> nyAgentOmradeCB;
    private javax.swing.JTextField nyAgentTelefonTF;
    private javax.swing.JComboBox<String> nyAlienAACB;
    private javax.swing.JTextField nyAlienLosenordTF;
    private javax.swing.JTextField nyAlienNamnTF;
    private javax.swing.JComboBox<String> nyAlienPlatsCB;
    private javax.swing.JComboBox<String> nyAlienRasCB;
    private javax.swing.JTextField nyAlienTelefonTF;
    private javax.swing.JComboBox<String> nyKontorsChefCB;
    private javax.swing.JTextField nyttLosenordTF;
    private javax.swing.JTextField nyttLosenordTestTF;
    private javax.swing.JList<String> omradeList;
    private javax.swing.JPanel omradenJPanel;
    private javax.swing.JPanel registrereNyAgentPanel;
    private javax.swing.JPanel registrereaAlienJPanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel startDateLabel;
    private javax.swing.JTextField startDateTF;
    private javax.swing.JButton taBortAgentBTN;
    private javax.swing.JButton taBortAlienBTN;
    private javax.swing.JToggleButton taBortUtrustningBTN;
    private javax.swing.JComboBox<String> typCB;
    private javax.swing.JComboBox<String> utrustningsTypCB;
    private javax.swing.JComboBox<String> valCB;
    private javax.swing.JComboBox<String> valdNyOmradeschefCB;
    private javax.swing.JComboBox<String> valdUtrustningCB;
    private javax.swing.JTextField valdUtrustningTF;
    private javax.swing.JTextField valtOmradeTF;
    private javax.swing.JTextField verktygsNamnTF;
    // End of variables declaration//GEN-END:variables
}
